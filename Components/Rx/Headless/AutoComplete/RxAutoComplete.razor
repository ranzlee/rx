<div id="@(Id)" class="@(ContainerClass)">
    <label class="@(LabelContainerClass)" for="@(Id)-input">
        <span class="@(LabelClass)">@(Label)</span>
        <Spinner Id="@($"{Id}-autocomplete-indicator")" Transition="@(TransitionType.Opacity)" />
    </label>
    <div id="@(Id)-autocomplete-input-container">
        <input
            id="@(Id)-input"
            name="@(PropertyName)" 
            value="@(Value)" 
            type="search"
            hx-get="@(GetListFromRoute)"
            hx-trigger="input changed delay:@(DelayMilliseconds)ms"
            hx-target="#@(Id)-autocomplete-list"
            hx-swap="innerHTML transition:true settle:0ms"
            hx-indicator="#@(Id)-autocomplete-indicator"
            class="@($"{ControlClass} {(isInvalid ? InvalidClass : "")}")"
            autocomplete="off"
            role="combobox"
            aria-invalid="@(isInvalid ? "true" : false)"
            aria-describedby="@(isInvalid ? $"{Id}-error" : false)"
            aria-expanded="false"
            aria-autocomplete="list" 
            aria-controls="@(Id)-autocomplete-list-items"
            @attributes=@(AdditionalAttributes)>
        <input 
            data-id="@(Id)" 
            data-validate-on-change="@(AllowValidateOnChange)"
            id="@(Id)-autocomplete-selected-id" 
            type="hidden" 
            name="@(SelectedIdPropertyName)" 
            value="@(SelectedIdValue)">
        <script>
            (function(){
                var input = document.getElementById('@(Id)-input');
                input.addEventListener('htmx:beforeRequest', (evt) => {
                    var selected = document.getElementById('@(Id)-autocomplete-selected-id');
                    var validateEvt = new Event('input', { bubbles: true });
                    if ((selected.value ?? '') !== '') {
                        selected.value = '';
                        //** crazy synchronization ahead **
                        //when the previous selected value is changed, we must
                        //cancel the get list request, dispatch validation,
                        //and on afterValidation re-issue the original request to 
                        //get the list
                        if (!selected.hasAttribute("data-validate-on-change")) {
                            return;
                        }
                        evt.preventDefault();
                        var component = document.getElementById("@(Id)");
                        var afterValidationHandler = function (evt) {
                            evt.stopPropagation();
                            component.removeEventListener("validationChange", afterValidationHandler);
                            var source = document.getElementById('@(Id)-input');
                            htmx.ajax('GET', '@(GetListFromRoute)', {
                                target: '#@(Id)-autocomplete-list',
                                swap: 'innerHTML transition:true settle:0ms',
                                source: source
                            });
                        }
                        component.addEventListener("validationChange", afterValidationHandler);
                        selected.dispatchEvent(validateEvt);
                    }
                    if ((evt.target.value?.length ?? 0) < @(MinimumLengthToTrigger)) {
                        evt.preventDefault();
                        document.getElementById('@(Id)-autocomplete-list').replaceChildren([]);
                    }
                });
            })()
        </script>
        @(ValidationContainer)
    </div>
    <input id="@(Id)-autocomplete-list-max-height" type="hidden" value="@(ListMaxPixelHeight)">
    <input id="@(Id)-autocomplete-list-class" type="hidden" value="@(ListClass)">
    <input id="@(Id)-autocomplete-pattern-match-class" type="hidden" value="@(PatternMatchClass)">
    <input id="@(Id)-autocomplete-skip-selected-validation" type="hidden" value="@(SkipOnSelectedValidateOnChange.ToString().ToLower())">
    <div tabindex="-1" id="@(Id)-autocomplete-list" class="@(ListContainerClass)"></div>
</div>

@code {
    [Inject] public ValidationContext ValidationContext { get; set; } = null!;
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter] public string Id { get; set; } = string.Empty;
    [Parameter, EditorRequired] public string Label { get; set; } = null!;
    [Parameter, EditorRequired] public string PropertyName { get; set; } = null!;
    [Parameter, EditorRequired] public string SelectedIdPropertyName { get; set; } = null!;
    [Parameter, EditorRequired] public string GetListFromRoute { get; set; } = null!;
    [Parameter] public string? Value { get; set; }
    [Parameter] public string? SelectedIdValue { get; set; }
    [Parameter] public int DelayMilliseconds { get; set; } = 500;
    [Parameter] public int MinimumLengthToTrigger { get; set; } = 3;
    [Parameter] public int ListMaxPixelHeight { get; set; } = 250;  
    [Parameter] public bool AllowValidateOnChange { get; set; }
    [Parameter] public bool SkipOnSelectedValidateOnChange { get; set; }
    [Parameter] public RenderFragment? ValidationContainer { get; set; }
    [Parameter] public string ContainerClass { get; set; } = null!;
    [Parameter] public string InvalidClass { get; set; } = null!;
    [Parameter] public string ControlClass { get; set; } = null!;
    [Parameter] public string LabelContainerClass { get; set; } = null!;
    [Parameter] public string LabelClass { get; set; } = null!;
    [Parameter] public string ListContainerClass { get; set; } = null!;
    [Parameter] public string ListClass { get; set; } = null!;
    [Parameter] public string PatternMatchClass { get; set; } = null!;
      
    private bool isInvalid { get; set; }
    protected override void OnParametersSet() {
        if (ValidationContext.TryGetError(PropertyName, out var _)) {
            isInvalid = true;
        }
        if (string.IsNullOrWhiteSpace(Id)) {
            if (AllowValidateOnChange) {
                throw new InvalidOperationException($"{nameof(AllowValidateOnChange)} requires the {nameof(Id)} property to be set to a unique value.");   
            }
            Id = Utilities.GenerateElementId();
        }
    }
}