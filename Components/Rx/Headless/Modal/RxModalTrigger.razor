<button id="@(Id)" type="button" @attributes="@(AdditionalAttributes)">
    @(ChildContent)
</button>
<script>
    (function() {
        var trigger = document.getElementById("@(Id)");
        var handler = function() {
            var modal = document.getElementById("@(ModalId)");
            if (modal === null) {
                console.warn("@($"dialog element with id {ModalId} not found.")");
                return;
            }
            if (modal.tagName.toLowerCase() !== 'dialog') {
                console.warn("@($"element with id ${ModalId} must be of type dialog.")");
                return;
            }
            modal.showModal();
            htmx.trigger('#@(ModalId)', 'opened', { routeValue: "@(RouteValue)", textNodeValue: "@(TextNodeValue)" });
        }
        trigger.onmousedown = @(TriggerOnMouseDown ? "handler" : "null");
        trigger.onclick = handler;
    })();
</script>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired] public string ModalId { get; set; } = null!;
    [Parameter] public string? RouteValue { get; set; }
    [Parameter] public string? TextNodeValue { get; set; }
    [Parameter] public string Id { get; set; } = null!;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool TriggerOnMouseDown { get; set; }
    protected override void OnParametersSet() {
        if (string.IsNullOrWhiteSpace(Id)) {
            Id = Utilities.GenerateElementId();
        }
    }
}