<div id="@(Id)" class="@(ContainerClass)">
    <label class="@(LabelClass)" for="@(Id)-input">@(Label)</label>
    <input
        data-id="@(Id)" 
        data-validate-on-change="@(AllowValidateOnChange)"
        Id="@(Id)-input"
        name="@(PropertyName)" 
        value="@(Value)" 
        type="@(InputType)" 
        aria-invalid="@(isInvalid ? "true" : false)"
        aria-describedby="@(isInvalid ? $"{Id}-error" : false)"
        class="@($"{ControlClass} {(isInvalid ? InvalidClass : "")}")"
        autocomplete="off"
        @attributes=@(AdditionalAttributes)>
    @if (InputType.Trim().ToLower() == "datetime-local") {
        <input id="@(Id)-time-zone" name="@(PropertyName)TimeZone" type="hidden">
        <script>
            (function() {
                function setTimeZone() {
                    var tz =  Intl.DateTimeFormat().resolvedOptions().timeZone;
                    document.getElementById("@(Id)-time-zone").value = tz;
                }
                var input = document.getElementById("@(Id)-input");
                var dt = new Date(`${input.value}:00.000Z`);
                if (!isNaN(dt.getTime())) {
                    input.value = `${dt.getFullYear()}-${(dt.getMonth() + 1).toString().padStart(2, '0')}-${dt.getDate().toString().padStart(2, '0')}T${dt.getHours().toString().padStart(2, '0')}:${dt.getMinutes().toString().padStart(2, '0')}`;
                }
                setTimeZone();
                document.getElementById("@(Id)").addEventListener("validationChange", (evt) => {
                    setTimeZone();
                    evt.stopPropagation();
                });
            })()
        </script> 
    }
    @(ValidationContainer)
</div>

@code {
    [Inject] public ValidationContext ValidationContext { get; set; } = null!;
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired] public string Label { get; set; } = null!;
    [Parameter, EditorRequired] public string PropertyName { get; set; } = null!;
    [Parameter] public string Id { get; set; } = string.Empty;
    [Parameter] public string InputType { get; set; } = "text";
    [Parameter] public object? Value { get; set; }
    [Parameter] public bool AllowValidateOnChange { get; set; }
    [Parameter] public RenderFragment? ValidationContainer { get; set; }
    [Parameter] public string ContainerClass { get; set; } = null!;
    [Parameter] public string InvalidClass { get; set; } = null!;
    [Parameter] public string ControlClass { get; set; } = null!;
    [Parameter] public string LabelClass { get; set; } = null!;

    private bool isInvalid { get; set; }
    protected override void OnParametersSet() {
        if (InputType.Trim().ToLower() == "date") {
            Value = (Value as DateOnly?)?.ToString("yyyy-MM-dd");
        }
        if (InputType.Trim().ToLower() == "datetime-local" && DateTime.TryParse(Value?.ToString(), out var dt)) {
            Value = dt.ToString("yyyy-MM-ddTHH:mm", CultureInfo.InvariantCulture);
        }
        if (ValidationContext.TryGetError(PropertyName, out var _)) {
            isInvalid = true;
        }
        if (string.IsNullOrWhiteSpace(Id)) {
            if (AllowValidateOnChange) {
                throw new InvalidOperationException($"{nameof(AllowValidateOnChange)} must have a unique {nameof(Id)} assigned.");    
            }
            Id = Utilities.GenerateElementId();
        }
    }
}