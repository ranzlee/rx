<fieldset id="@(Id)" class="@(ContainerClass)">
    <legend class="@(LegendClass)">@(Legend)</legend>
    <div class="@(GroupClass)">
        @foreach (var option in Options) {
            <label class="@(LabelContainerClass)">
                <input
                    data-id="@(Id)"
                    data-validate-on-change="@(AllowValidateOnChange)"
                    id="@($"{Id}-{option.Value}")"
                    type="radio" 
                    name="@(PropertyName)"
                    value="@(option.Value)" 
                    checked="@(option.Value == Value)"
                    class="@($"{ControlClass} {(isInvalid ? InvalidClass : "")}")"
                    @attributes=@(AdditionalAttributes)>
                <span class="@($"{(isInvalid ? InvalidLabelClass : "")}")">@(option.Key)</span>
            </label>
        }
    </div>
    @(ValidationContainer)
</fieldset>

@code {
    [Inject] public ValidationContext ValidationContext { get; set; } = null!;
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired] public string Legend { get; set; } = null!;
    [Parameter, EditorRequired] public string PropertyName { get; set; } = null!;
    [Parameter] public string Id { get; set; } = string.Empty;
    [Parameter] public string Value { get; set; } = null!;
    [Parameter] public bool AllowValidateOnChange { get; set; }
    [Parameter] public IEnumerable<KeyValuePair<string, string>> Options { get; set; } = [];
    [Parameter] public Type? EnumType { get; set; }
    [Parameter] public RenderFragment? ValidationContainer { get; set; }
    [Parameter] public string ContainerClass { get; set; } = null!;
    [Parameter] public string InvalidClass { get; set; } = null!;
    [Parameter] public string ControlClass { get; set; } = null!;
    [Parameter] public string LegendClass { get; set; } = null!;
    [Parameter] public string LabelContainerClass { get; set; } = null!;
    [Parameter] public string InvalidLabelClass { get; set; } = null!;
    [Parameter] public string GroupClass { get; set; } = null!;

    private bool isInvalid { get; set; }

    protected override void OnParametersSet() {
        if (EnumType is not null) {
            Options = new List<KeyValuePair<string, string>>(Options);
            var enumNames = Enum.GetNames(EnumType);
            foreach (var en in enumNames) {
                var e = Enum.Parse(EnumType, en) as Enum;
                ((List<KeyValuePair<string, string>>)Options).Add(new KeyValuePair<string, string>(e!.GetDescription(), en));
            }
        }
        if (ValidationContext.TryGetError(PropertyName, out var _)) {
            isInvalid = true;
        }
        if (string.IsNullOrWhiteSpace(Id)) {
            if (AllowValidateOnChange) {
                throw new InvalidOperationException($"{nameof(AllowValidateOnChange)} must have a unique {nameof(Id)} assigned.");    
            }
            Id = Utilities.GenerateElementId();
        }
    }
}