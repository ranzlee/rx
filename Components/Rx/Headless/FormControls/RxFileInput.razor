<div id="@(Id)" hx-ext="ignore:json-enc" class="@(ContainerClass)">
    <label class="@(LabelClass)" for="@(Id)-input">@(Label)</label>
    <input 
        data-id="@(Id)"
        id="@(Id)-input" 
        type="file" 
        name="@(PropertyName)"
        multiple="@(AllowMultiple)"
        accept="@(Accept)"
        aria-invalid="@(isInvalid ? "true" : false)"
        aria-describedby="@(isInvalid ? $"{Id}-error" : false)" 
        class="@($"{ControlClass} {(isInvalid ? InvalidClass : "")}")">
    @(ValidationContainer)
    <div>
        <progress id="@(Id)-progress" class="@(ProgressClass)" value="0" max="100" style="opacity: 0"></progress>
    </div>
    <div class="@(ButtonContainerClass)">
        <button
            id="@(Id)-submit"
            type="button"
            hx-encoding="multipart/form-data"
            hx-include="#@(Id)"
            hx-request='{ "timeout": @(RequestTimeoutMilliseconds) }'
            @attributes=@(AdditionalAttributes)
            disabled
            class="@(SubmitButtonClass)">
            Upload
        </button>
        <button 
            id="@(Id)-cancel" 
            type="button"
            disabled 
            class="@(CancelButtonClass)">
            Cancel
        </button>
    </div>
    <script>
        (function() {
            var progress = document.getElementById("@(Id)-progress");
            var submit = document.getElementById("@(Id)-submit");
            var cancel = document.getElementById("@(Id)-cancel");
            var input = document.getElementById("@(Id)-input");
            var uploadStatus = { isUploading: false };
            var reset = function() {
                progress.value = 0;
                progress.style.opacity = '0';
                uploadStatus.isUploading = false;
                submit.setAttribute("disabled", "");
                cancel.setAttribute("disabled", "");
                input.removeAttribute("disabled");
                input.value = "";
            }
            submit.onclick = function () {
                uploadStatus.isUploading = false;
                progress.style.opacity = '1';
                htmx.on(submit, "htmx:xhr:progress", (evt) => {    
                    if (!uploadStatus.isUploading) {
                        uploadStatus.isUploading = true;
                        submit.setAttribute("disabled", "");  
                        input.setAttribute("disabled", "");    
                    }
                    if (evt.detail.total === 0) {
                        return;
                    }
                    var status = Math.ceil((evt.detail.loaded / evt.detail.total) * 100);
                    progress.value = status;
                });
                htmx.on(submit, "htmx:afterRequest", () => {
                    reset();
                });
            }
            cancel.onclick = function () {
                if (uploadStatus.isUploading) {
                    htmx.trigger(submit, "htmx:abort", {});
                }
                reset();
            }
            input.onchange = function() {
                if (input?.files?.length > 0) {
                    submit.removeAttribute("disabled");
                    cancel.removeAttribute("disabled");
                    return;
                }
                submit.setAttribute("disabled", "");
                cancel.setAttribute("disabled", "");
            }
        })()
    </script>
</div>


@code {
    [Inject] public ValidationContext ValidationContext { get; set; } = null!;
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired] public string Label { get; set; } = null!;
    [Parameter, EditorRequired] public string PropertyName { get; set; } = null!;
    [Parameter] public string Id { get; set; } = string.Empty;
    [Parameter] public bool AllowMultiple { get; set; }
    [Parameter] public string Accept { get; set; } = string.Empty;
    [Parameter] public int RequestTimeoutMilliseconds { get; set; } = 10 * 60 * 1000;
    [Parameter] public string? ValidationPropertyName { get; set; }
    [Parameter] public RenderFragment? ValidationContainer { get; set; }
    [Parameter] public string ContainerClass { get; set; } = null!;
    [Parameter] public string InvalidClass { get; set; } = null!;
    [Parameter] public string ControlClass { get; set; } = null!;
    [Parameter] public string LabelClass { get; set; } = null!;
    [Parameter] public string ProgressClass { get; set; } = null!;
    [Parameter] public string ButtonContainerClass { get; set; } = null!;
    [Parameter] public string SubmitButtonClass { get; set; } = null!;
    [Parameter] public string CancelButtonClass { get; set; } = null!;
    private bool isInvalid { get; set; }
    protected override void OnParametersSet() {
        var validationPropertyName = string.IsNullOrWhiteSpace(ValidationPropertyName)
            ? PropertyName
            : ValidationPropertyName;
        if (ValidationContext.TryGetError(validationPropertyName, out var _)) {
            isInvalid = true;
        }
        if (string.IsNullOrWhiteSpace(Id)) {
            Id = Utilities.GenerateElementId();
        }
    }
}