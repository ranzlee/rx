<div id="@(Id)" class="@(ContainerClass)">
    <label class="@(LabelContainerClass)" for="@(Id)-input">
        <span class="@(LabelClass)">@(Label)</span>
        <span id="@(Id)-value" class="@(ValueClass)">@(Value)</span>
    </label>
    <input 
        data-id="@(Id)"
        data-validate-on-change="@(AllowValidateOnChange)"
        Id="@(Id)-input" 
        name="@(PropertyName)" 
        type="range"
        value="@(Value)"
        aria-invalid="@(isInvalid ? "true" : false)"
        aria-describedby="@(isInvalid ? $"{Id}-error" : false)"
        class="@($"{ControlClass} {(isInvalid ? InvalidClass : "")}")" 
        @attributes=@(AdditionalAttributes)>
    <script>
        (function() {
            var range = document.getElementById("@(Id)-input");
            var rangeValue = document.getElementById("@(Id)-value");
            range.oninput = function() {
                rangeValue.innerText = range.value;
            }
        })()
    </script>
    @(ValidationContainer)
</div>

@code {
    [Inject] public ValidationContext ValidationContext { get; set; } = null!;
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired] public string Label { get; set; } = null!;
    [Parameter, EditorRequired] public string PropertyName { get; set; } = null!;
    [Parameter] public string Id { get; set; } = string.Empty;
    [Parameter] public int Value { get; set; }
    [Parameter] public bool AllowValidateOnChange { get; set; }
    [Parameter] public RenderFragment? ValidationContainer { get; set; }
    [Parameter] public string ContainerClass { get; set; } = null!;
    [Parameter] public string InvalidClass { get; set; } = null!;
    [Parameter] public string ControlClass { get; set; } = null!;
    [Parameter] public string LabelContainerClass { get; set; } = null!;
    [Parameter] public string LabelClass { get; set; } = null!;
    [Parameter] public string ValueClass { get; set; } = null!;

    private bool isInvalid { get; set; }
    protected override void OnParametersSet() {
        if (ValidationContext.TryGetError(PropertyName, out var _)) {
            isInvalid = true;
        }
        if (string.IsNullOrWhiteSpace(Id)) {
            if (AllowValidateOnChange) {
                throw new InvalidOperationException($"{nameof(AllowValidateOnChange)} must have a unique {nameof(Id)} assigned.");    
            }
            Id = Utilities.GenerateElementId();
        }
    }
}