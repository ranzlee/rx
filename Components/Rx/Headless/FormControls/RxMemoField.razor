<div id="@(Id)" class="@(ContainerClass)">
    <label class="@(LabelContainerClass)" for="@(Id)-input">
        <span class="@(LabelClass)">@(Label)</span>
        <span class="@(CounterClass)">
            <span id="@(Id)-len"></span>
            @if (MaxLength.HasValue)
            {
                <span>&nbsp;of&nbsp;@(MaxLength.Value)</span>
            }
        </span>
    </label>
    <textarea
        data-id="@(Id)"
        data-validate-on-change="@(AllowValidateOnChange)"
        id="@(Id)-input"
        name="@(PropertyName)"
        value="@(Value)"
        maxlength="@(MaxLength)"
        aria-invalid="@(isInvalid ? "true" : false)"
        aria-describedby="@(isInvalid ? $"{Id}-error" : false)"
        class="@($"{ControlClass} {(isInvalid ? InvalidClass : "")}")"
        @attributes=@(AdditionalAttributes)>
    </textarea>
    @(ValidationContainer)
    <script>
        (function() {
            var memo = document.getElementById("@(Id)-input");
            var memoLength = document.getElementById("@(Id)-len");
            var skipResize = true;
            memoLength.innerText = 0;
            var resize = function() {
                memo.style.height = 'auto';
                memo.style.height = (memo.scrollHeight + @(AutosizeHeightBuffer)).toString() +'px';
            }
            var calc = function() {
                if (!skipResize) {
                    resize();
                }
                memoLength.innerText = memo.value.length;
            }
            var calcAfterTick = function() {
                setTimeout(calc, 0);
            }
            memo.onfocus = resize;
            memo.onchange = calc;
            memo.oncut = calcAfterTick;
            memo.onpaste = calcAfterTick;
            memo.ondrop = calcAfterTick;
            memo.onkeydown = calcAfterTick;
            calc();
            skipResize = false;
            document.getElementById("@(Id)").addEventListener("validationChange", (evt) => {
                calc();
                evt.stopPropagation();
            });
        })();
    </script>
</div>

@code {
    [Inject] public ValidationContext ValidationContext { get; set; } = null!;
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired] public string Label { get; set; } = string.Empty;
    [Parameter, EditorRequired] public string PropertyName { get; set; } = string.Empty;
    [Parameter] public int AutosizeHeightBuffer { get; set; } = 4;
    [Parameter] public string Id { get; set; } = string.Empty;
    [Parameter] public int? MaxLength { get; set; }
    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public bool AllowValidateOnChange { get; set; }
    [Parameter] public RenderFragment? ValidationContainer { get; set; }
    [Parameter] public string ContainerClass { get; set; } = null!;
    [Parameter] public string InvalidClass { get; set; } = null!;
    [Parameter] public string ControlClass { get; set; } = null!;
    [Parameter] public string LabelContainerClass { get; set; } = null!;
    [Parameter] public string LabelClass { get; set; } = null!;
    [Parameter] public string CounterClass { get; set; } = null!;

    private bool isInvalid { get; set; }
    
    protected override void OnParametersSet() {
        if (ValidationContext.TryGetError(PropertyName, out var _)) {
            isInvalid = true;
        }
        if (string.IsNullOrWhiteSpace(Id)) {
            if (AllowValidateOnChange) {
                throw new InvalidOperationException($"{nameof(AllowValidateOnChange)} requires the {nameof(Id)} property to be set to a unique value.");
            }
            Id = Utilities.GenerateElementId();
        }
    }
}