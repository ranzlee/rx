<div id="@(Id)" hx-ext="morph" @attributes=@(AdditionalAttributes)>
    @(ChildContent)
    <script>
        (function() {
            var validate = function(evt) {
                evt.stopPropagation();
                if (!evt.srcElement.hasAttribute("data-validate-on-change")) {
                    return;
                }
                var dataId = evt.srcElement.getAttribute("data-id");
                var source = document.getElementById('@(Id)');
                htmx.ajax('POST', '@(ValidationPostRoute)', {
                    select: `#${dataId}`,
                    target: `#${dataId}`,
                    swap: 'morph:{ignoreActiveValue:true}',
                    source: source
                }).then(() => {
                    var evt = new Event('validationChange');
                    var ele = document.getElementById(dataId);
                    ele?.dispatchEvent(evt);
                });
            }
            var debounce = function() {
                var timer;
                return function(evt) {
                    clearTimeout(timer);
                    timer = setTimeout(() => {
                        validate(evt);
                    }, @(DebounceMilliseconds));
                }
            }
            var passThroughEventWhenDisabled = function(evt) {
                //even if change validation is disabled, components may depend on the validationChange event
                var dataId = evt.srcElement.getAttribute("data-id");
                var ele = document.getElementById(dataId);
                ele?.dispatchEvent(new Event('validationChange'));
            }
            document.getElementById("@(Id)").oninput = @(IsDisabled ? "passThroughEventWhenDisabled" : "debounce()"); 
        })()
    </script>
</div>


@code {
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired] public string Id { get; set; } = null!;
    [Parameter, EditorRequired] public string ValidationPostRoute { get; set; } = null!;
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public int DebounceMilliseconds { get; set; } = 600;
    [Parameter] public RenderFragment? ChildContent { get; set; }

}