<div id="@(Id)" class="@(ContainerClass)">
    <label class="@(LabelContainerClass)">
        <span>@(Label)</span>
        <input
            data-id="@(Id)" 
            data-validate-on-change="@(AllowValidateOnChange)"
            id="@(Id)-input" 
            type="checkbox" 
            name="@(PropertyName)" 
            checked="@(IsChecked)"
            class="@($"{ControlClass} {(isInvalid ? InvalidClass : "")}")"
            aria-invalid="@(isInvalid ? "true" : false)"
            aria-describedby="@(isInvalid ? $"{Id}-error" : false)" 
            @attributes=@(AdditionalAttributes)>            
    </label>
    @(ValidationContainer)
</div>

@code {
    [Inject] public ValidationContext ValidationContext { get; set; } = null!;
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired] public string Label { get; set; } = null!;
    [Parameter, EditorRequired] public string PropertyName { get; set; } = null!;
    [Parameter] public string Id { get; set; } = string.Empty;
    [Parameter] public bool IsChecked { get; set; }
    [Parameter] public bool AllowValidateOnChange { get; set; }
    [Parameter] public RenderFragment? ValidationContainer { get; set; }
    [Parameter] public string ContainerClass { get; set; } = null!;
    [Parameter] public string InvalidClass { get; set; } = null!;
    [Parameter] public string ControlClass { get; set; } = null!;
    [Parameter] public string LabelContainerClass { get; set; } = null!;

    private bool isInvalid { get; set; }
    
    protected override void OnParametersSet() {
        if (ValidationContext.TryGetError(PropertyName, out var _)) {
            isInvalid = true;
        }
        if (string.IsNullOrWhiteSpace(Id)) {
            if (AllowValidateOnChange) {
                throw new InvalidOperationException($"{nameof(AllowValidateOnChange)} must have a unique {nameof(Id)} assigned.");    
            }
            Id = Utilities.GenerateElementId();
        }
    }
}