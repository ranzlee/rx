@implements IComponentModel<IAsyncComponent>

@if (Model.IsAsync) {
    <div id="@(Model.Id)" >
        <input id="@(Model.StateKey)" type="hidden"> 
        @if (!string.IsNullOrWhiteSpace(Model.InitialState)) {
            <script>
                razorx.metadata.set(
                    @(Convert.ToInt32(Model.StateScope)),
                    "@(Model.StateKey)",
                    "@(Model.InitialState)"
                );
            </script>
        }
        <div 
            id="@(Model.Id)-async-boundary"
            hx-trigger="load" 
            hx-get="@(Model.RenderFromRoute)" 
            hx-swap="outerHTML transition:true" 
            hx-target="#@(Model.Id)">
            @(FallbackContent)
        </div>
        <script>
            razorx.metadata.addToRequest(
                @(Convert.ToInt32(Model.StateScope)), 
                "@(Model.StateKey)",
                document.getElementById("@(Model.Id)-async-boundary"));
        </script>
    </div>
    return;
}
<div id="@(Model.Id)">
    <input id="@(Model.StateKey)" type="hidden"> 
    @(AwaitContent)    
</div>

@code {
    [Parameter, EditorRequired] public IAsyncComponent Model { get; set; } = null!;
    [Parameter] public RenderFragment? AwaitContent { get; set; }
    [Parameter] public RenderFragment? FallbackContent { get; set; }
}