@implements IComponentModel<IDataSetModel<T>>
@typeparam T

@if (Model is null) {
    return;
}

<div id="@(Id)" class="@(ContainerClass)">
    <div class="@(ControlClass)">
        <button id="@($"{Model.Id}-page-previous")" 
            type="button" 
            name="@nameof(IDataSetState.Page)"
            value="previous" 
            disabled="@(!Model.State.HasPreviousPage())"
            aria-label="@(Model.State.HasPreviousPage() ? $"Go to page {Model.State.Page - 1}" : "No previous page")"
            class="@(ButtonClass)"
            hx-indicator="@(string.IsNullOrWhiteSpace(Model.SpinnerId) ? false : $"#{Model.SpinnerId}")"  
            hx-trigger="@(TriggerOnMouseDown ? "mousedown, " : "") click"
            hx-disabled-elt="this"
            hx-get="@(Model.RenderFromRoute)" 
            hx-swap="outerHTML transition:true" 
            hx-target="#@(Model.Id)">«</button>
        <div class="@(RangeContainerClass)">
            <div id="@($"{Model.Id}-page-selector-tooltip")" class="@(TooltipClass)" data-tip="@(Model.State.Page)">
                <input id="@($"{Model.Id}-page-selector")" 
                    type="range"
                    name="@(nameof(IDataSetState.Page))" 
                    hx-indicator="@(string.IsNullOrWhiteSpace(Model.SpinnerId) ? false : $"#{Model.SpinnerId}")"  
                    hx-disabled-elt="this"
                    hx-get="@(Model.RenderFromRoute)" 
                    hx-swap="outerHTML transition:true" 
                    hx-target="#@(Model.Id)"
                    hx-trigger="change delay:400ms"
                    aria-label="Page slider"
                    min="1" 
                    max="@(Model.State.GetTotalPages())" 
                    value="@(Model.State.Page)" 
                    class="@(RangeClass)">
            </div>
        </div>
        <button id="@($"{Model.Id}-page-next")" 
            type="button" 
            name="@nameof(IDataSetState.Page)"
            value="next" 
            disabled="@(!Model.State.HasNextPage())"
            aria-label="@(Model.State.HasNextPage() ? $"Go to page {Model.State.Page + 1}" : "No next page")"
            class="@(ButtonClass)"
            hx-indicator="@(string.IsNullOrWhiteSpace(Model.SpinnerId) ? false : $"#{Model.SpinnerId}")"  
            hx-trigger="@(TriggerOnMouseDown ? "mousedown, " : "") click"
            hx-disabled-elt="this"
            hx-get="@(Model.RenderFromRoute)" 
            hx-swap="outerHTML transition:true" 
            hx-target="#@(Model.Id)">»</button>  
    </div>
    <div id="@($"{Model.Id}-page-label")" class="@(LabelClass)"></div>
    <script>
        (function() {
            var pageSelector = document.getElementById("@($"{Model.Id}-page-selector")");
            var pageSelectorTooltip = document.getElementById("@($"{Model.Id}-page-selector-tooltip")");
            var pageLabel = document.getElementById("@($"{Model.Id}-page-label")");
            function setLabel() {
                pageLabel.innerText = `Page ${pageSelector.value} of @(Model.State.GetTotalPages())`;
            }
            function calcHoverValue(evt) {
                var w = pageSelector.clientWidth;
                var x = evt.offsetX;
                var percents = x / w;
                var max = parseInt(pageSelector.max);
                var current = Math.floor(percents * max + 1);
                if (current < 1) {
                    current = 1;
                }
                var totalPages = @(Model.State.GetTotalPages()); 
                if (current > totalPages) {
                    current = totalPages;
                }
                pageSelectorTooltip.setAttribute("data-tip", current.toString()); 
            }
            pageSelector.oninput = setLabel;
            pageSelector.onmousemove = calcHoverValue;
            setLabel();
        })()
        razorx.metadata.addToRequest(
            @(Convert.ToInt32(Model.StateScope)), 
            "@(Model.StateKey)",
            document.getElementById("@($"{Model.Id}-page-previous")"));
        razorx.metadata.addToRequest(
            @(Convert.ToInt32(Model.StateScope)), 
            "@(Model.StateKey)",
            document.getElementById("@($"{Model.Id}-page-next")"));
        razorx.metadata.addToRequest(
            @(Convert.ToInt32(Model.StateScope)), 
            "@(Model.StateKey)",
            document.getElementById("@($"{Model.Id}-page-selector")"));
    </script>
</div>

@code {
    [Parameter, EditorRequired] public IDataSetModel<T> Model { get; set; } = null!; 
    [Parameter] public string Id { get; set; } = null!;
    [Parameter] public bool TriggerOnMouseDown { get; set; }
    [Parameter] public string ContainerClass { get; set; } = null!;
    [Parameter] public string LabelClass { get; set; } = null!;
    [Parameter] public string ControlClass { get; set; } = null!;
    [Parameter] public string ButtonClass { get; set; } = null!;
    [Parameter] public string RangeContainerClass { get; set; } = null!;
    [Parameter] public string RangeClass { get; set; } = null!;
    [Parameter] public string TooltipClass { get; set; } = null!;
    protected override void OnParametersSet() {
        if (string.IsNullOrWhiteSpace(Id)) {
            Id = Utilities.GenerateElementId();
        }
    } 
}