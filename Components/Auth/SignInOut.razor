@if (!HttpContextAccessor.HttpContext!.User.Identity!.IsAuthenticated) {
    <div>
        <form name="sign-in" method="post" action="/auth/sign-in">
            <input type="hidden" name="@(antiforgeryTokenSet.FormFieldName)" value="@(antiforgeryTokenSet.RequestToken)" />
            <button type="submit" title="Sign in" aria-label="Sign in" class="btn btn-ghost">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M6 3.5a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 0-1 0v2A1.5 1.5 0 0 0 6.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-8A1.5 1.5 0 0 0 5 3.5v2a.5.5 0 0 0 1 0z"/>
                    <path fill-rule="evenodd" d="M11.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H1.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708z"/>
                </svg>
            </button>
        </form>
    </div>
} else {
    <div>
        <form name="sign-out" method="post" action="/auth/sign-out"> 
            <input type="hidden" name="@(antiforgeryTokenSet.FormFieldName)" value="@(antiforgeryTokenSet.RequestToken)" />
            <button type="submit" title="Sign out" aria-label="Sign out" class="btn btn-ghost">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0z"/>
                    <path fill-rule="evenodd" d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708z"/>
                </svg>
            </button>
        </form>
    </div>
}

@code {
    [Inject] public IHttpContextAccessor HttpContextAccessor { get; set; } = null!;
    [Inject] public IAntiforgery Antiforgery { get; set; } = null!;
    private AntiforgeryTokenSet antiforgeryTokenSet = null!;

    protected override void OnParametersSet() {
        antiforgeryTokenSet = Antiforgery.GetAndStoreTokens(HttpContextAccessor.HttpContext!);
    }
}